<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>kvstore`std::__1::basic_ios&lt;char,.std::__1::char_traits&lt;char&gt; (1 samples, 0.02%)</title><rect x="1173.2" y="277" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.20" y="287.5" ></text>
</g>
<g >
<title>libsystem_pthread`_pthread_mutex_lock_init_slow (1 samples, 0.02%)</title><rect x="1173.5" y="181" width="0.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1176.46" y="191.5" ></text>
</g>
<g >
<title>kvstore`std::__1::pointer_traits&lt;std::__1::__list_node_base&lt;BufferedPage,.void*&gt;*&gt;::pointer_to(std::__1::__list_node_base&lt;BufferedPage, (1 samples, 0.02%)</title><rect x="16.6" y="117" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="19.56" y="127.5" ></text>
</g>
<g >
<title>kvstore`std::__1::optional&lt;std::__1::list&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (1 samples, 0.02%)</title><rect x="14.2" y="229" width="0.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="17.20" y="239.5" ></text>
</g>
<g >
<title>dyld`start (4,495 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >dyld`start</text>
</g>
<g >
<title>all (4,495 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt;, (288 samples, 6.41%)</title><rect x="530.0" y="197" width="75.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="533.04" y="207.5" >kvstore`..</text>
</g>
<g >
<title>libsystem_malloc`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.7" y="53" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="16.68" y="63.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::operator[](unsigned.long) (750 samples, 16.69%)</title><rect x="408.8" y="229" width="196.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="411.76" y="239.5" >kvstore`std::__1::bitset&lt;..</text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::set(unsigned.long, (1,669 samples, 37.13%)</title><rect x="167.5" y="245" width="438.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="170.51" y="255.5" >kvstore`std::__1::bitset&lt;1024ul&gt;::set(unsigned.long,</text>
</g>
<g >
<title>kvstore`BufferedPage::BufferedPage(BufferedPage.const&amp;) (2 samples, 0.04%)</title><rect x="17.1" y="229" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="20.09" y="239.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_bzero$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="1175.6" y="229" width="1.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1178.56" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__function::__value_func&lt;unsigned.int (4 samples, 0.09%)</title><rect x="1177.1" y="261" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1180.14" y="271.5" ></text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::trie_put_in_bucket(TrieNode&amp;,.BufferedPage) (14 samples, 0.31%)</title><rect x="13.4" y="245" width="3.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="16.41" y="255.5" ></text>
</g>
<g >
<title>kvstore`PageId::~PageId() (1 samples, 0.02%)</title><rect x="12.6" y="245" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="15.63" y="255.5" ></text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (2 samples, 0.04%)</title><rect x="17.9" y="245" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="20.88" y="255.5" ></text>
</g>
<g >
<title>libsystem_malloc`free (2 samples, 0.04%)</title><rect x="15.8" y="69" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="18.78" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc`small_size (2 samples, 0.04%)</title><rect x="15.8" y="37" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="18.78" y="47.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::set(unsigned.long, (1 samples, 0.02%)</title><rect x="1176.6" y="277" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1179.61" y="287.5" ></text>
</g>
<g >
<title>kvstore`Hash(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="17.6" y="245" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="20.61" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::operator[](unsigned.long) (715 samples, 15.91%)</title><rect x="961.6" y="229" width="187.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="964.61" y="239.5" >kvstore`std::__1::bitset..</text>
</g>
<g >
<title>kvstore`void.std::__1::__do_deallocate_handle_size&lt;&gt;(void*, (3 samples, 0.07%)</title><rect x="15.8" y="101" width="0.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="18.78" y="111.5" ></text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::trie_erase_from_bucket(TrieNode&amp;,.PageId (1 samples, 0.02%)</title><rect x="1178.4" y="133" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1181.45" y="143.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::__1::bitset&lt;1024ul&gt;,.32ul&gt;::array() (1 samples, 0.02%)</title><rect x="605.6" y="261" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="608.64" y="271.5" ></text>
</g>
<g >
<title>libsystem_c`__sfvwrite (34 samples, 0.76%)</title><rect x="1179.2" y="213" width="9.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1182.24" y="223.5" ></text>
</g>
<g >
<title>kvstore`void.std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage, (2 samples, 0.04%)</title><rect x="13.7" y="213" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="16.68" y="223.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1188.2" y="245" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1191.16" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__function::__alloc_func&lt;create_hash_funcs(unsigned.long (2 samples, 0.04%)</title><rect x="1177.7" y="229" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1180.66" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::list&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (5 samples, 0.11%)</title><rect x="15.5" y="197" width="1.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="18.51" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (4 samples, 0.09%)</title><rect x="1175.6" y="261" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1178.56" y="271.5" ></text>
</g>
<g >
<title>kvstore`void.std::__1::list&lt;BufferedPage, (10 samples, 0.22%)</title><rect x="14.5" y="229" width="2.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="17.46" y="239.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::array&lt;unsigned.char, (2 samples, 0.04%)</title><rect x="635.8" y="261" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="638.83" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__optional_copy_base&lt;BufferedPage,.false&gt;::~__optional_copy_base() (1 samples, 0.02%)</title><rect x="1178.4" y="197" width="0.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1181.45" y="207.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_ostream&lt;char,.std::__1::char_traits&lt;char&gt; (38 samples, 0.85%)</title><rect x="1178.7" y="277" width="10.0" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="1181.71" y="287.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bitset&lt;16ul,.1024ul&gt;::__make_ref(unsigned (545 samples, 12.12%)</title><rect x="1006.2" y="213" width="143.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1009.24" y="223.5" >kvstore`std::__1::..</text>
</g>
<g >
<title>kvstore`XXH64 (2 samples, 0.04%)</title><rect x="1177.7" y="165" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1180.66" y="175.5" ></text>
</g>
<g >
<title>libsystem_pthread`___chkstk_darwin (1 samples, 0.02%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1192.74" y="303.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_string&lt;char,.std::__1::char_traits&lt;char&gt;, (1 samples, 0.02%)</title><rect x="12.4" y="197" width="0.2" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="15.36" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::__1::bitset&lt;1024ul&gt;,.32ul&gt;::at(unsigned (2 samples, 0.04%)</title><rect x="1154.0" y="261" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1157.04" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (4 samples, 0.09%)</title><rect x="1175.6" y="277" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1178.56" y="287.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="17.1" y="213" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="20.09" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;unsigned.char, (41 samples, 0.91%)</title><rect x="785.7" y="245" width="10.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="788.73" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::__1::bitset&lt;1024ul&gt;,.32ul&gt;::array() (1 samples, 0.02%)</title><rect x="605.6" y="245" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="608.64" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_node_base&lt;BufferedPage,.void*&gt;::__self() (1 samples, 0.02%)</title><rect x="16.6" y="133" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="19.56" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.7" y="69" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="16.68" y="79.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="167.2" y="197" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="170.25" y="207.5" ></text>
</g>
<g >
<title>kvstore`ClockEvictor::MarkUsed(PageId) (4 samples, 0.09%)</title><rect x="11.6" y="245" width="1.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="14.58" y="255.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::bitset&lt;1024ul&gt;::set(unsigned.long, (23 samples, 0.51%)</title><rect x="140.2" y="245" width="6.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="143.21" y="255.5" ></text>
</g>
<g >
<title>libsystem_malloc`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1178.4" y="69" width="0.3" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="1181.45" y="79.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__optional_move_assign_base&lt;BufferedPage,.false&gt;::~__optional_move_assign_base() (1 samples, 0.02%)</title><rect x="1178.4" y="245" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1181.45" y="255.5" ></text>
</g>
<g >
<title>kvstore`PageId::operator==(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="14.7" y="197" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="17.73" y="207.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="18.4" y="245" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="21.40" y="255.5" ></text>
</g>
<g >
<title>libsystem_malloc`free_small (1 samples, 0.02%)</title><rect x="16.3" y="69" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="19.30" y="79.5" ></text>
</g>
<g >
<title>libc++.1`DYLD-STUB$$operator.new(unsigned (1 samples, 0.02%)</title><rect x="18.1" y="197" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="21.14" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::fpos&lt;__mbstate_t&gt;::fpos(long.long) (1 samples, 0.02%)</title><rect x="1176.9" y="261" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1179.87" y="271.5" ></text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::GetPage(PageId.const&amp;) (6 samples, 0.13%)</title><rect x="11.3" y="261" width="1.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="14.31" y="271.5" ></text>
</g>
<g >
<title>kvstore`PageId::operator==(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="11.8" y="213" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="14.84" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__optional_storage_base&lt;BufferedPage,.false&gt;::~__optional_storage_base() (1 samples, 0.02%)</title><rect x="1178.4" y="181" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1181.45" y="191.5" ></text>
</g>
<g >
<title>kvstore`Filter::FilterImpl::de_filter(std::__1::array&lt;unsigned.char, (2,180 samples, 48.50%)</title><rect x="33.4" y="261" width="572.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="36.36" y="271.5" >kvstore`Filter::FilterImpl::de_filter(std::__1::array&lt;unsigned.char,</text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::trie_erase_from_bucket(TrieNode&amp;,.PageId (1 samples, 0.02%)</title><rect x="1178.4" y="149" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1181.45" y="159.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_string&lt;char,.std::__1::char_traits&lt;char&gt;, (1 samples, 0.02%)</title><rect x="13.7" y="117" width="0.2" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="16.68" y="127.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bitset&lt;16ul,.1024ul&gt;::__bitset() (1 samples, 0.02%)</title><rect x="605.6" y="197" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="608.64" y="207.5" ></text>
</g>
<g >
<title>Thread_2641841.DispatchQueue_1: (4,495 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >Thread_2641841.DispatchQueue_1:</text>
</g>
<g >
<title>kvstore`std::__1::vector&lt;std::__1::optional&lt;ClockMetadata&gt;,.std::__1::allocator&lt;std::__1::optional&lt;ClockMetadata&gt; (1 samples, 0.02%)</title><rect x="12.1" y="213" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="15.10" y="223.5" ></text>
</g>
<g >
<title>libsystem_malloc`szone_size (2 samples, 0.04%)</title><rect x="15.8" y="53" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.78" y="63.5" ></text>
</g>
<g >
<title>kvstore`bool.std::__1::operator==&lt;std::__1::allocator&lt;char&gt; (1 samples, 0.02%)</title><rect x="14.7" y="181" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="17.73" y="191.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_streambuf&lt;char,.std::__1::char_traits&lt;char&gt; (38 samples, 0.85%)</title><rect x="1178.7" y="261" width="10.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1181.71" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_node_base&lt;BufferedPage,.void*&gt;* (1 samples, 0.02%)</title><rect x="16.6" y="101" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="19.56" y="111.5" ></text>
</g>
<g >
<title>libsystem_c`fflush (2 samples, 0.04%)</title><rect x="1173.5" y="213" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1176.46" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_imp&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (1 samples, 0.02%)</title><rect x="13.4" y="213" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="16.41" y="223.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_string&lt;char,.std::__1::char_traits&lt;char&gt;, (1 samples, 0.02%)</title><rect x="12.6" y="213" width="0.3" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="15.63" y="223.5" ></text>
</g>
<g >
<title>kvstore`Filter::FilterImpl::Put(unsigned.long (4,493 samples, 99.96%)</title><rect x="10.3" y="293" width="1179.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="13.26" y="303.5" >kvstore`Filter::FilterImpl::Put(unsigned.long</text>
</g>
<g >
<title>libsystem_malloc`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="12.4" y="133" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="15.36" y="143.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_bzero$VARIANT$Haswell (10 samples, 0.22%)</title><rect x="1149.8" y="245" width="2.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1152.84" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_const_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt; (286 samples, 6.36%)</title><rect x="1074.2" y="197" width="75.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1077.23" y="207.5" >kvstore`..</text>
</g>
<g >
<title>kvstore`std::__1::__optional_move_base&lt;BufferedPage,.false&gt;::~__optional_move_base() (1 samples, 0.02%)</title><rect x="1178.4" y="213" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1181.45" y="223.5" ></text>
</g>
<g >
<title>libsystem_malloc`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="13.7" y="85" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="16.68" y="95.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;unsigned.char, (21 samples, 0.47%)</title><rect x="1160.1" y="261" width="5.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1163.07" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__compressed_pair&lt;unsigned.long, (1 samples, 0.02%)</title><rect x="13.4" y="197" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="16.41" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::list&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (3 samples, 0.07%)</title><rect x="13.4" y="229" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="16.41" y="239.5" ></text>
</g>
<g >
<title>kvstore`ToRaw(std::__1::array&lt;std::byte,.4096ul&gt;&amp;, (29 samples, 0.65%)</title><rect x="1165.6" y="277" width="7.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1168.59" y="287.5" ></text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="13.7" y="149" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="16.68" y="159.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bitset&lt;16ul,.1024ul&gt;::__bitset() (1 samples, 0.02%)</title><rect x="167.2" y="213" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="170.25" y="223.5" ></text>
</g>
<g >
<title>kvstore`ClockEvictor::ClockEvictorImpl::MarkUsed(PageId) (3 samples, 0.07%)</title><rect x="11.6" y="229" width="0.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="14.58" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;unsigned.char, (21 samples, 0.47%)</title><rect x="612.2" y="261" width="5.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="615.21" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::optional&lt;BufferedPage&gt;::value().&amp; (1 samples, 0.02%)</title><rect x="1178.2" y="277" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1181.19" y="287.5" ></text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::PutPage(PageId.const&amp;, (21 samples, 0.47%)</title><rect x="13.2" y="261" width="5.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.15" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__function::__func&lt;create_hash_funcs(unsigned.long (2 samples, 0.04%)</title><rect x="1177.7" y="245" width="0.5" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1180.66" y="255.5" ></text>
</g>
<g >
<title>kvstore`unsigned.int (2 samples, 0.04%)</title><rect x="1177.7" y="213" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1180.66" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::function&lt;unsigned.int (4 samples, 0.09%)</title><rect x="1177.1" y="277" width="1.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1180.14" y="287.5" ></text>
</g>
<g >
<title>kvstore`void.std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage, (2 samples, 0.04%)</title><rect x="13.7" y="197" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.68" y="207.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_filebuf&lt;char,.std::__1::char_traits&lt;char&gt; (8 samples, 0.18%)</title><rect x="1173.5" y="245" width="2.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1176.46" y="255.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::array&lt;std::byte,.4096ul&gt;::at(unsigned (3 samples, 0.07%)</title><rect x="31.5" y="261" width="0.8" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="34.53" y="271.5" ></text>
</g>
<g >
<title>kvstore`BufPool::BufPoolImpl::trie_put_in_bucket(TrieNode&amp;,.BufferedPage)::'lambda'(BufferedPage (1 samples, 0.02%)</title><rect x="14.7" y="213" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="17.73" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::fpos&lt;__mbstate_t&gt;::fpos(long.long) (1 samples, 0.02%)</title><rect x="1176.9" y="277" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1179.87" y="287.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_imp&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (2 samples, 0.04%)</title><rect x="15.0" y="197" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="17.99" y="207.5" ></text>
</g>
<g >
<title>libsystem_c`funlockfile (1 samples, 0.02%)</title><rect x="1173.7" y="197" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1176.72" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::basic_streambuf&lt;char,.std::__1::char_traits&lt;char&gt; (8 samples, 0.18%)</title><rect x="1173.5" y="261" width="2.1" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="1176.46" y="271.5" ></text>
</g>
<g >
<title>kvstore`PageId::~PageId() (1 samples, 0.02%)</title><rect x="1178.4" y="117" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.45" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="12.4" y="165" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="15.36" y="175.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="1188.7" y="277" width="1.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1191.69" y="287.5" ></text>
</g>
<g >
<title>kvstore`BufPool::GetPage(PageId&amp;).const (6 samples, 0.13%)</title><rect x="11.3" y="277" width="1.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="14.31" y="287.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_const_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt; (359 samples, 7.99%)</title><rect x="867.4" y="229" width="94.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="870.37" y="239.5" >kvstore`std..</text>
</g>
<g >
<title>kvstore`XXH64_endian_align (2 samples, 0.04%)</title><rect x="1177.7" y="149" width="0.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1180.66" y="159.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::array&lt;unsigned.char, (10 samples, 0.22%)</title><rect x="137.6" y="245" width="2.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="140.58" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__libcpp_deallocate(void*,.unsigned (3 samples, 0.07%)</title><rect x="15.8" y="117" width="0.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="18.78" y="127.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_node_base&lt;BufferedPage,.void*&gt;::__list_node_base() (1 samples, 0.02%)</title><rect x="16.6" y="165" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="19.56" y="175.5" ></text>
</g>
<g >
<title>kvstore`std::__1::ios_base::good().const (1 samples, 0.02%)</title><rect x="1173.2" y="261" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1176.20" y="271.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_filebuf&lt;char,.std::__1::char_traits&lt;char&gt; (2 samples, 0.04%)</title><rect x="1173.5" y="229" width="0.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1176.46" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__compressed_pair&lt;unsigned.long, (1 samples, 0.02%)</title><rect x="15.3" y="181" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="18.25" y="191.5" ></text>
</g>
<g >
<title>kvstore`bool.std::__1::operator==&lt;std::__1::allocator&lt;char&gt; (1 samples, 0.02%)</title><rect x="11.8" y="197" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="14.84" y="207.5" ></text>
</g>
<g >
<title>kvstore`PageId::~PageId() (1 samples, 0.02%)</title><rect x="12.6" y="229" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="15.63" y="239.5" ></text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="12.4" y="229" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="15.36" y="239.5" ></text>
</g>
<g >
<title>libsystem_platform`DYLD-STUB$$_platform_memset (2 samples, 0.04%)</title><rect x="1149.3" y="245" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1152.31" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::list&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (7 samples, 0.16%)</title><rect x="15.0" y="213" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="17.99" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::__1::bitset&lt;1024ul&gt;,.32ul&gt;::at(unsigned (2 samples, 0.04%)</title><rect x="605.9" y="261" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="608.91" y="271.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memcmp$VARIANT$Base (1 samples, 0.02%)</title><rect x="11.8" y="165" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="14.84" y="175.5" ></text>
</g>
<g >
<title>kvstore`std::__1::char_traits&lt;char&gt;::compare(char.const*, (1 samples, 0.02%)</title><rect x="11.8" y="181" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="14.84" y="191.5" ></text>
</g>
<g >
<title>kvstore`Filter::FilterImpl::ser_filter(std::__1::bitset&lt;1024ul&gt;&amp;).const (1,972 samples, 43.87%)</title><rect x="636.4" y="261" width="517.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="639.36" y="271.5" >kvstore`Filter::FilterImpl::ser_filter(std::__1::bitset&lt;1024ul&gt;&amp;).const</text>
</g>
<g >
<title>kvstore`std::__1::optional&lt;BufferedPage&gt;::~optional() (1 samples, 0.02%)</title><rect x="1178.4" y="261" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1181.45" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage,.void*&gt; (3 samples, 0.07%)</title><rect x="15.8" y="149" width="0.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="18.78" y="159.5" ></text>
</g>
<g >
<title>kvstore`BufPool::PutPage(PageId&amp;,.PageType, (22 samples, 0.49%)</title><rect x="12.9" y="277" width="5.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="15.89" y="287.5" ></text>
</g>
<g >
<title>kvstore`BufferedPage::BufferedPage(BufferedPage.const&amp;) (2 samples, 0.04%)</title><rect x="17.1" y="245" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="20.09" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::operator!=(std::__1::__list_iterator&lt;BufferedPage,.void*&gt; (1 samples, 0.02%)</title><rect x="16.8" y="213" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="19.83" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (1 samples, 0.02%)</title><rect x="605.6" y="213" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="608.64" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::byte,.4096ul&gt;::at(unsigned (22 samples, 0.49%)</title><rect x="606.4" y="261" width="5.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="609.43" y="271.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memset$VARIANT$Haswell (6 samples, 0.13%)</title><rect x="1152.5" y="245" width="1.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1155.46" y="255.5" ></text>
</g>
<g >
<title>libc++abi`operator.new(unsigned (1 samples, 0.02%)</title><rect x="12.4" y="181" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="15.36" y="191.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;unsigned.char, (80 samples, 1.78%)</title><rect x="146.2" y="245" width="21.0" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="149.24" y="255.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="605.6" y="181" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="608.64" y="191.5" ></text>
</g>
<g >
<title>libsystem_malloc`free_tiny (1 samples, 0.02%)</title><rect x="1178.4" y="85" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.45" y="95.5" ></text>
</g>
<g >
<title>kvstore`std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage,.void*&gt; (3 samples, 0.07%)</title><rect x="15.8" y="133" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="18.78" y="143.5" ></text>
</g>
<g >
<title>kvstore`PageId::~PageId() (1 samples, 0.02%)</title><rect x="1178.4" y="101" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.45" y="111.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt;, (625 samples, 13.90%)</title><rect x="244.7" y="229" width="164.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="247.69" y="239.5" >kvstore`std::__1::__b..</text>
</g>
<g >
<title>libsystem_c`flockfile (1 samples, 0.02%)</title><rect x="1173.5" y="197" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.46" y="207.5" ></text>
</g>
<g >
<title>kvstore`Filter::Put(unsigned.long (4,494 samples, 99.98%)</title><rect x="10.3" y="309" width="1179.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="13.26" y="319.5" >kvstore`Filter::Put(unsigned.long</text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::operator[](unsigned.long) (1 samples, 0.02%)</title><rect x="1176.6" y="261" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1179.61" y="271.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (12 samples, 0.27%)</title><rect x="617.7" y="261" width="3.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="620.72" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::test(unsigned.long) (1,344 samples, 29.90%)</title><rect x="796.5" y="245" width="352.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="799.49" y="255.5" >kvstore`std::__1::bitset&lt;1024ul&gt;::test(unsigned..</text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (2 samples, 0.04%)</title><rect x="17.9" y="229" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="20.88" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bitset&lt;16ul,.1024ul&gt;::__bitset() (4 samples, 0.09%)</title><rect x="1175.6" y="245" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1178.56" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (1 samples, 0.02%)</title><rect x="167.2" y="245" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="170.25" y="255.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_string&lt;char,.std::__1::char_traits&lt;char&gt;, (2 samples, 0.04%)</title><rect x="17.9" y="213" width="0.5" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="20.88" y="223.5" ></text>
</g>
<g >
<title>libsystem_platform`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="13.9" y="149" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="16.94" y="159.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_imp&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (4 samples, 0.09%)</title><rect x="15.5" y="165" width="1.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="18.51" y="175.5" ></text>
</g>
<g >
<title>kvstore`BufferedPage::BufferedPage(BufferedPage.const&amp;) (2 samples, 0.04%)</title><rect x="13.7" y="181" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="16.68" y="191.5" ></text>
</g>
<g >
<title>libsystem_c`fseeko (6 samples, 0.13%)</title><rect x="1174.0" y="229" width="1.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1176.99" y="239.5" ></text>
</g>
<g >
<title>libc++.1`std::__1::basic_filebuf&lt;char,.std::__1::char_traits&lt;char&gt; (36 samples, 0.80%)</title><rect x="1178.7" y="245" width="9.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1181.71" y="255.5" ></text>
</g>
<g >
<title>libsystem_c`_swrite (34 samples, 0.76%)</title><rect x="1179.2" y="197" width="9.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1182.24" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt;, (158 samples, 3.52%)</title><rect x="564.2" y="181" width="41.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="567.17" y="191.5" >kvs..</text>
</g>
<g >
<title>kvstore`Filter::FilterImpl::to_buf(std::__1::array&lt;std::__1::bitset&lt;1024ul&gt;,.32ul&gt;&amp;) (2,075 samples, 46.16%)</title><rect x="620.9" y="277" width="544.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="623.87" y="287.5" >kvstore`Filter::FilterImpl::to_buf(std::__1::array&lt;std::__1::bitset&lt;1024ul..</text>
</g>
<g >
<title>libsystem_platform`_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1176.9" y="245" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1179.87" y="255.5" ></text>
</g>
<g >
<title>kvstore`std::__1::optional&lt;BufferedPage&gt;::~optional() (1 samples, 0.02%)</title><rect x="1178.4" y="277" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1181.45" y="287.5" ></text>
</g>
<g >
<title>kvstore`void.std::__1::__libcpp_operator_delete&lt;void*&gt;(void*) (3 samples, 0.07%)</title><rect x="15.8" y="85" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="18.78" y="95.5" ></text>
</g>
<g >
<title>kvstore`BufferedPage::BufferedPage(BufferedPage.const&amp;) (2 samples, 0.04%)</title><rect x="13.7" y="165" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="16.68" y="175.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_imp&lt;BufferedPage,.std::__1::allocator&lt;BufferedPage&gt; (5 samples, 0.11%)</title><rect x="15.5" y="181" width="1.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="18.51" y="191.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage,.void*&gt; (1 samples, 0.02%)</title><rect x="13.4" y="181" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="16.41" y="191.5" ></text>
</g>
<g >
<title>libsystem_c`_sseek (6 samples, 0.13%)</title><rect x="1174.0" y="197" width="1.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1176.99" y="207.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bitset&lt;16ul,.1024ul&gt;::__make_ref(unsigned (543 samples, 12.08%)</title><rect x="463.1" y="213" width="142.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="466.10" y="223.5" >kvstore`std::__1::..</text>
</g>
<g >
<title>kvstore`std::__1::basic_ostream&lt;char,.std::__1::char_traits&lt;char&gt; (8 samples, 0.18%)</title><rect x="1173.5" y="277" width="2.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1176.46" y="287.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::array&lt;unsigned.char, (4 samples, 0.09%)</title><rect x="32.3" y="261" width="1.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="35.31" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (1 samples, 0.02%)</title><rect x="167.2" y="229" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="170.25" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__optional_destruct_base&lt;BufferedPage,.false&gt;::~__optional_destruct_base() (1 samples, 0.02%)</title><rect x="1178.4" y="165" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1181.45" y="175.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__optional_copy_assign_base&lt;BufferedPage,.false&gt;::~__optional_copy_assign_base() (1 samples, 0.02%)</title><rect x="1178.4" y="229" width="0.3" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1181.45" y="239.5" ></text>
</g>
<g >
<title>kvstore`Filter::FilterImpl::from_buf(std::__1::array&lt;std::byte,.4096ul&gt;&amp;) (2,294 samples, 51.03%)</title><rect x="18.7" y="277" width="602.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="21.66" y="287.5" >kvstore`Filter::FilterImpl::from_buf(std::__1::array&lt;std::byte,.4096ul&gt;&amp;)</text>
</g>
<g >
<title>libsystem_kernel`__lseek (6 samples, 0.13%)</title><rect x="1174.0" y="181" width="1.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1176.99" y="191.5" ></text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="13.7" y="133" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="16.68" y="143.5" ></text>
</g>
<g >
<title>kvstore`std::__1::bitset&lt;1024ul&gt;::bitset() (1 samples, 0.02%)</title><rect x="605.6" y="229" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="608.64" y="239.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__bit_const_reference&lt;std::__1::__bitset&lt;16ul,.1024ul&gt; (138 samples, 3.07%)</title><rect x="1113.1" y="181" width="36.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1116.08" y="191.5" >kvs..</text>
</g>
<g >
<title>libsystem_pthread`_pthread_mutex_unlock_init_slow (1 samples, 0.02%)</title><rect x="1173.7" y="181" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1176.72" y="191.5" ></text>
</g>
<g >
<title>kvstore`decltype(static_cast&lt;create_hash_funcs(unsigned.long (2 samples, 0.04%)</title><rect x="1177.7" y="197" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1180.66" y="207.5" ></text>
</g>
<g >
<title>libsystem_c`_fseeko (6 samples, 0.13%)</title><rect x="1174.0" y="213" width="1.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1176.99" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__list_node_base&lt;BufferedPage,.void*&gt;::__list_node_base() (1 samples, 0.02%)</title><rect x="16.6" y="149" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="19.56" y="159.5" ></text>
</g>
<g >
<title>libsystem_c`DYLD-STUB$$write$NOCANCEL (1 samples, 0.02%)</title><rect x="1179.2" y="181" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1182.24" y="191.5" ></text>
</g>
<g >
<title>libsystem_kernel`__write_nocancel (33 samples, 0.73%)</title><rect x="1179.5" y="181" width="8.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1182.50" y="191.5" ></text>
</g>
<g >
<title>libc++abi`operator.new(unsigned (1 samples, 0.02%)</title><rect x="13.7" y="101" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="16.68" y="111.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::array&lt;unsigned.char, (2 samples, 0.04%)</title><rect x="784.9" y="245" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="787.94" y="255.5" ></text>
</g>
<g >
<title>kvstore`DYLD-STUB$$std::__1::bitset&lt;1024ul&gt;::test(unsigned.long) (1 samples, 0.02%)</title><rect x="785.5" y="245" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="788.47" y="255.5" ></text>
</g>
<g >
<title>kvstore`main (4,495 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >kvstore`main</text>
</g>
<g >
<title>kvstore`create_hash_funcs(unsigned.long (2 samples, 0.04%)</title><rect x="1177.7" y="181" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1180.66" y="191.5" ></text>
</g>
<g >
<title>libsystem_malloc`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="12.4" y="149" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="15.36" y="159.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::byte,.4096ul&gt;::at(unsigned (21 samples, 0.47%)</title><rect x="1154.6" y="261" width="5.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1157.56" y="271.5" ></text>
</g>
<g >
<title>libsystem_c`fwrite (35 samples, 0.78%)</title><rect x="1179.0" y="229" width="9.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.97" y="239.5" ></text>
</g>
<g >
<title>kvstore`PageId::PageId(PageId.const&amp;) (1 samples, 0.02%)</title><rect x="12.4" y="213" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="15.36" y="223.5" ></text>
</g>
<g >
<title>kvstore`std::__1::array&lt;std::byte,.4096ul&gt;::operator[](unsigned (4 samples, 0.09%)</title><rect x="1172.1" y="261" width="1.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1175.15" y="271.5" ></text>
</g>
<g >
<title>kvstore`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;std::__1::__list_node&lt;BufferedPage,.void*&gt; (1 samples, 0.02%)</title><rect x="15.3" y="165" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="18.25" y="175.5" ></text>
</g>
</g>
</svg>
